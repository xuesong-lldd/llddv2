<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="742.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="725" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="725" > </text>
<g id="frames">
<g >
<title>__mcount_internal (9,417 samples, 5.24%)</title><rect x="422.7" y="133" width="61.9" height="15.0" fill="rgb(236,102,47)" rx="2" ry="2" />
<text  x="425.71" y="143.5" >__mcou..</text>
</g>
<g >
<title>__mcount_internal (51 samples, 0.03%)</title><rect x="584.0" y="101" width="0.4" height="15.0" fill="rgb(241,7,27)" rx="2" ry="2" />
<text  x="587.03" y="111.5" ></text>
</g>
<g >
<title>fb (89,799 samples, 49.97%)</title><rect x="11.6" y="357" width="589.7" height="15.0" fill="rgb(247,2,17)" rx="2" ry="2" />
<text  x="14.58" y="367.5" >fb</text>
</g>
<g >
<title>fb (74,172 samples, 41.28%)</title><rect x="114.2" y="213" width="487.1" height="15.0" fill="rgb(220,169,20)" rx="2" ry="2" />
<text  x="117.20" y="223.5" >fb</text>
</g>
<g >
<title>__mcount_internal (10,857 samples, 6.04%)</title><rect x="218.7" y="165" width="71.3" height="15.0" fill="rgb(242,49,1)" rx="2" ry="2" />
<text  x="221.74" y="175.5" >__mcount..</text>
</g>
<g >
<title>__mcount_internal (363 samples, 0.20%)</title><rect x="202.8" y="181" width="2.4" height="15.0" fill="rgb(236,134,51)" rx="2" ry="2" />
<text  x="205.84" y="191.5" ></text>
</g>
<g >
<title>AliYunDun (155 samples, 0.09%)</title><rect x="10.0" y="677" width="1.0" height="15.0" fill="rgb(250,162,47)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>alloc_buffer_head (56 samples, 0.03%)</title><rect x="602.2" y="405" width="0.4" height="15.0" fill="rgb(211,177,51)" rx="2" ry="2" />
<text  x="605.19" y="415.5" ></text>
</g>
<g >
<title>__mcount_internal (307 samples, 0.17%)</title><rect x="408.9" y="149" width="2.1" height="15.0" fill="rgb(246,28,36)" rx="2" ry="2" />
<text  x="411.94" y="159.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (290 samples, 0.16%)</title><rect x="601.3" y="629" width="1.9" height="15.0" fill="rgb(219,181,11)" rx="2" ry="2" />
<text  x="604.31" y="639.5" ></text>
</g>
<g >
<title>__mcount_internal (58 samples, 0.03%)</title><rect x="26.1" y="245" width="0.3" height="15.0" fill="rgb(248,20,17)" rx="2" ry="2" />
<text  x="29.06" y="255.5" ></text>
</g>
<g >
<title>__mcount_internal (112 samples, 0.06%)</title><rect x="552.9" y="117" width="0.7" height="15.0" fill="rgb(249,201,1)" rx="2" ry="2" />
<text  x="555.89" y="127.5" ></text>
</g>
<g >
<title>__mcount_internal (107 samples, 0.06%)</title><rect x="41.4" y="229" width="0.7" height="15.0" fill="rgb(241,35,28)" rx="2" ry="2" />
<text  x="44.39" y="239.5" ></text>
</g>
<g >
<title>swapper (89,335 samples, 49.72%)</title><rect x="603.3" y="677" width="586.6" height="15.0" fill="rgb(224,47,52)" rx="2" ry="2" />
<text  x="606.29" y="687.5" >swapper</text>
</g>
<g >
<title>fb (81,508 samples, 45.36%)</title><rect x="66.0" y="229" width="535.3" height="15.0" fill="rgb(211,42,54)" rx="2" ry="2" />
<text  x="69.02" y="239.5" >fb</text>
</g>
<g >
<title>fb (43 samples, 0.02%)</title><rect x="601.0" y="69" width="0.3" height="15.0" fill="rgb(246,148,52)" rx="2" ry="2" />
<text  x="603.99" y="79.5" ></text>
</g>
<g >
<title>call_cpuidle (25,153 samples, 14.00%)</title><rect x="1024.7" y="533" width="165.2" height="15.0" fill="rgb(230,5,17)" rx="2" ry="2" />
<text  x="1027.71" y="543.5" >call_cpuidle</text>
</g>
<g >
<title>stack_trace_save (47 samples, 0.03%)</title><rect x="601.8" y="373" width="0.4" height="15.0" fill="rgb(220,159,35)" rx="2" ry="2" />
<text  x="604.85" y="383.5" ></text>
</g>
<g >
<title>fb (62,503 samples, 34.78%)</title><rect x="190.8" y="197" width="410.5" height="15.0" fill="rgb(212,159,0)" rx="2" ry="2" />
<text  x="193.82" y="207.5" >fb</text>
</g>
<g >
<title>main (89,838 samples, 50.00%)</title><rect x="11.3" y="677" width="590.0" height="15.0" fill="rgb(207,54,12)" rx="2" ry="2" />
<text  x="14.34" y="687.5" >main</text>
</g>
<g >
<title>fb (89,829 samples, 49.99%)</title><rect x="11.4" y="421" width="589.9" height="15.0" fill="rgb(252,5,26)" rx="2" ry="2" />
<text  x="14.38" y="431.5" >fb</text>
</g>
<g >
<title>__mcount_internal (22 samples, 0.01%)</title><rect x="11.6" y="325" width="0.2" height="15.0" fill="rgb(249,35,50)" rx="2" ry="2" />
<text  x="14.62" y="335.5" ></text>
</g>
<g >
<title>all (179,691 samples, 100%)</title><rect x="10.0" y="693" width="1180.0" height="15.0" fill="rgb(210,187,9)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (25,161 samples, 14.00%)</title><rect x="1024.7" y="645" width="165.2" height="15.0" fill="rgb(230,155,31)" rx="2" ry="2" />
<text  x="1027.71" y="655.5" >x86_64_start_kernel</text>
</g>
<g >
<title>cpuidle_enter_state (25,152 samples, 14.00%)</title><rect x="1024.7" y="501" width="165.2" height="15.0" fill="rgb(214,0,48)" rx="2" ry="2" />
<text  x="1027.72" y="511.5" >cpuidle_enter_state</text>
</g>
<g >
<title>arch_stack_walk (33 samples, 0.02%)</title><rect x="601.9" y="357" width="0.2" height="15.0" fill="rgb(251,83,42)" rx="2" ry="2" />
<text  x="604.87" y="367.5" ></text>
</g>
<g >
<title>jbd2__journal_start (53 samples, 0.03%)</title><rect x="601.3" y="357" width="0.4" height="15.0" fill="rgb(222,134,10)" rx="2" ry="2" />
<text  x="604.32" y="367.5" ></text>
</g>
<g >
<title>_mcount (11,207 samples, 6.24%)</title><rect x="411.0" y="149" width="73.6" height="15.0" fill="rgb(239,93,51)" rx="2" ry="2" />
<text  x="413.96" y="159.5" >_mcount</text>
</g>
<g >
<title>kmemleak_alloc (43 samples, 0.02%)</title><rect x="601.3" y="325" width="0.3" height="15.0" fill="rgb(248,7,45)" rx="2" ry="2" />
<text  x="604.34" y="335.5" ></text>
</g>
<g >
<title>_mcount (7,367 samples, 4.10%)</title><rect x="497.3" y="133" width="48.4" height="15.0" fill="rgb(236,196,38)" rx="2" ry="2" />
<text  x="500.34" y="143.5" >_mco..</text>
</g>
<g >
<title>__vfs_write (283 samples, 0.16%)</title><rect x="601.3" y="549" width="1.9" height="15.0" fill="rgb(217,166,43)" rx="2" ry="2" />
<text  x="604.32" y="559.5" ></text>
</g>
<g >
<title>do_idle (25,161 samples, 14.00%)</title><rect x="1024.7" y="549" width="165.2" height="15.0" fill="rgb(248,180,48)" rx="2" ry="2" />
<text  x="1027.71" y="559.5" >do_idle</text>
</g>
<g >
<title>_mcount (10,070 samples, 5.60%)</title><rect x="124.7" y="197" width="66.1" height="15.0" fill="rgb(226,163,1)" rx="2" ry="2" />
<text  x="127.70" y="207.5" >_mcount</text>
</g>
<g >
<title>call_cpuidle (64,153 samples, 35.70%)</title><rect x="603.3" y="597" width="421.3" height="15.0" fill="rgb(220,214,40)" rx="2" ry="2" />
<text  x="606.33" y="607.5" >call_cpuidle</text>
</g>
<g >
<title>[vmlinux] (89,335 samples, 49.72%)</title><rect x="603.3" y="661" width="586.6" height="15.0" fill="rgb(243,138,11)" rx="2" ry="2" />
<text  x="606.29" y="671.5" >[vmlinux]</text>
</g>
<g >
<title>ext4_da_write_begin (162 samples, 0.09%)</title><rect x="601.8" y="469" width="1.0" height="15.0" fill="rgb(217,99,42)" rx="2" ry="2" />
<text  x="604.76" y="479.5" ></text>
</g>
<g >
<title>generic_perform_write (217 samples, 0.12%)</title><rect x="601.8" y="485" width="1.4" height="15.0" fill="rgb(254,160,29)" rx="2" ry="2" />
<text  x="604.75" y="495.5" ></text>
</g>
<g >
<title>fb (89,823 samples, 49.99%)</title><rect x="11.4" y="389" width="589.9" height="15.0" fill="rgb(244,214,33)" rx="2" ry="2" />
<text  x="14.42" y="399.5" >fb</text>
</g>
<g >
<title>_mcount (1,867 samples, 1.04%)</title><rect x="26.4" y="245" width="12.3" height="15.0" fill="rgb(206,49,32)" rx="2" ry="2" />
<text  x="29.44" y="255.5" ></text>
</g>
<g >
<title>unwind_next_frame.part.4 (18 samples, 0.01%)</title><rect x="602.0" y="325" width="0.1" height="15.0" fill="rgb(206,119,13)" rx="2" ry="2" />
<text  x="604.97" y="335.5" ></text>
</g>
<g >
<title>perf (298 samples, 0.17%)</title><rect x="601.3" y="677" width="1.9" height="15.0" fill="rgb(205,11,16)" rx="2" ry="2" />
<text  x="604.29" y="687.5" ></text>
</g>
<g >
<title>fb (89,771 samples, 49.96%)</title><rect x="11.8" y="341" width="589.5" height="15.0" fill="rgb(215,219,32)" rx="2" ry="2" />
<text  x="14.76" y="351.5" >fb</text>
</g>
<g >
<title>cpuidle_enter (64,152 samples, 35.70%)</title><rect x="603.3" y="581" width="421.3" height="15.0" fill="rgb(249,12,2)" rx="2" ry="2" />
<text  x="606.33" y="591.5" >cpuidle_enter</text>
</g>
<g >
<title>__ext4_journal_start_sb (54 samples, 0.03%)</title><rect x="601.3" y="373" width="0.4" height="15.0" fill="rgb(244,140,11)" rx="2" ry="2" />
<text  x="604.32" y="383.5" ></text>
</g>
<g >
<title>_mcount (26 samples, 0.01%)</title><rect x="11.6" y="341" width="0.2" height="15.0" fill="rgb(207,174,5)" rx="2" ry="2" />
<text  x="14.59" y="351.5" ></text>
</g>
<g >
<title>__mcount_internal (1,572 samples, 0.87%)</title><rect x="28.4" y="229" width="10.3" height="15.0" fill="rgb(216,153,31)" rx="2" ry="2" />
<text  x="31.38" y="239.5" ></text>
</g>
<g >
<title>fb (89,828 samples, 49.99%)</title><rect x="11.4" y="405" width="589.9" height="15.0" fill="rgb(252,152,5)" rx="2" ry="2" />
<text  x="14.39" y="415.5" >fb</text>
</g>
<g >
<title>fb (89,835 samples, 49.99%)</title><rect x="11.3" y="485" width="590.0" height="15.0" fill="rgb(252,3,7)" rx="2" ry="2" />
<text  x="14.34" y="495.5" >fb</text>
</g>
<g >
<title>ext4_buffered_write_iter (283 samples, 0.16%)</title><rect x="601.3" y="501" width="1.9" height="15.0" fill="rgb(215,7,22)" rx="2" ry="2" />
<text  x="604.32" y="511.5" ></text>
</g>
<g >
<title>do_readlinkat (22 samples, 0.01%)</title><rect x="10.3" y="581" width="0.2" height="15.0" fill="rgb(225,124,37)" rx="2" ry="2" />
<text  x="13.33" y="591.5" ></text>
</g>
<g >
<title>_mcount (52 samples, 0.03%)</title><rect x="11.8" y="325" width="0.3" height="15.0" fill="rgb(221,151,36)" rx="2" ry="2" />
<text  x="14.81" y="335.5" ></text>
</g>
<g >
<title>__GI___readlink (26 samples, 0.01%)</title><rect x="10.3" y="645" width="0.2" height="15.0" fill="rgb(243,21,42)" rx="2" ry="2" />
<text  x="13.31" y="655.5" ></text>
</g>
<g >
<title>__mcount_internal (295 samples, 0.16%)</title><rect x="122.8" y="197" width="1.9" height="15.0" fill="rgb(246,32,29)" rx="2" ry="2" />
<text  x="125.76" y="207.5" ></text>
</g>
<g >
<title>[unknown] (78 samples, 0.04%)</title><rect x="10.1" y="661" width="0.5" height="15.0" fill="rgb(218,162,30)" rx="2" ry="2" />
<text  x="13.06" y="671.5" ></text>
</g>
<g >
<title>[unknown] (293 samples, 0.16%)</title><rect x="601.3" y="661" width="1.9" height="15.0" fill="rgb(226,191,52)" rx="2" ry="2" />
<text  x="604.29" y="671.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (64,152 samples, 35.70%)</title><rect x="603.3" y="565" width="421.3" height="15.0" fill="rgb(231,127,51)" rx="2" ry="2" />
<text  x="606.33" y="575.5" >cpuidle_enter_state</text>
</g>
<g >
<title>[perf-773.map] (18 samples, 0.01%)</title><rect x="10.1" y="645" width="0.1" height="15.0" fill="rgb(215,176,31)" rx="2" ry="2" />
<text  x="13.06" y="655.5" ></text>
</g>
<g >
<title>fb (89,835 samples, 49.99%)</title><rect x="11.3" y="565" width="590.0" height="15.0" fill="rgb(234,125,43)" rx="2" ry="2" />
<text  x="14.34" y="575.5" >fb</text>
</g>
<g >
<title>create_object (51 samples, 0.03%)</title><rect x="602.2" y="357" width="0.4" height="15.0" fill="rgb(248,30,6)" rx="2" ry="2" />
<text  x="605.22" y="367.5" ></text>
</g>
<g >
<title>fb (936 samples, 0.52%)</title><rect x="595.1" y="101" width="6.2" height="15.0" fill="rgb(243,179,8)" rx="2" ry="2" />
<text  x="598.12" y="111.5" ></text>
</g>
<g >
<title>unwind_next_frame (19 samples, 0.01%)</title><rect x="602.0" y="341" width="0.1" height="15.0" fill="rgb(231,115,36)" rx="2" ry="2" />
<text  x="604.97" y="351.5" ></text>
</g>
<g >
<title>fb (47,395 samples, 26.38%)</title><rect x="290.0" y="181" width="311.3" height="15.0" fill="rgb(230,176,28)" rx="2" ry="2" />
<text  x="293.04" y="191.5" >fb</text>
</g>
<g >
<title>fb (89,835 samples, 49.99%)</title><rect x="11.3" y="517" width="590.0" height="15.0" fill="rgb(206,57,48)" rx="2" ry="2" />
<text  x="14.34" y="527.5" >fb</text>
</g>
<g >
<title>file_update_time (66 samples, 0.04%)</title><rect x="601.3" y="453" width="0.5" height="15.0" fill="rgb(212,182,25)" rx="2" ry="2" />
<text  x="604.32" y="463.5" ></text>
</g>
<g >
<title>_mcount (119 samples, 0.07%)</title><rect x="600.2" y="69" width="0.8" height="15.0" fill="rgb(245,201,54)" rx="2" ry="2" />
<text  x="603.21" y="79.5" ></text>
</g>
<g >
<title>ext4_block_write_begin (69 samples, 0.04%)</title><rect x="602.2" y="453" width="0.4" height="15.0" fill="rgb(225,128,36)" rx="2" ry="2" />
<text  x="605.19" y="463.5" ></text>
</g>
<g >
<title>start_kernel (25,161 samples, 14.00%)</title><rect x="1024.7" y="613" width="165.2" height="15.0" fill="rgb(240,43,14)" rx="2" ry="2" />
<text  x="1027.71" y="623.5" >start_kernel</text>
</g>
<g >
<title>_mcount (12,915 samples, 7.19%)</title><rect x="205.2" y="181" width="84.8" height="15.0" fill="rgb(222,27,3)" rx="2" ry="2" />
<text  x="208.23" y="191.5" >_mcount</text>
</g>
<g >
<title>poll_idle (25 samples, 0.01%)</title><rect x="1024.4" y="549" width="0.2" height="15.0" fill="rgb(249,58,10)" rx="2" ry="2" />
<text  x="1027.40" y="559.5" ></text>
</g>
<g >
<title>__mcount_internal (6,174 samples, 3.44%)</title><rect x="505.2" y="117" width="40.5" height="15.0" fill="rgb(237,157,50)" rx="2" ry="2" />
<text  x="508.18" y="127.5" >__m..</text>
</g>
<g >
<title>__x64_sys_write (290 samples, 0.16%)</title><rect x="601.3" y="597" width="1.9" height="15.0" fill="rgb(208,73,37)" rx="2" ry="2" />
<text  x="604.31" y="607.5" ></text>
</g>
<g >
<title>__mcount_internal (8,399 samples, 4.67%)</title><rect x="135.7" y="181" width="55.1" height="15.0" fill="rgb(229,6,16)" rx="2" ry="2" />
<text  x="138.67" y="191.5" >__mco..</text>
</g>
<g >
<title>__mcount_internal (768 samples, 0.43%)</title><rect x="19.7" y="245" width="5.0" height="15.0" fill="rgb(243,217,53)" rx="2" ry="2" />
<text  x="22.69" y="255.5" ></text>
</g>
<g >
<title>new_sync_write (283 samples, 0.16%)</title><rect x="601.3" y="533" width="1.9" height="15.0" fill="rgb(243,60,18)" rx="2" ry="2" />
<text  x="604.32" y="543.5" ></text>
</g>
<g >
<title>__mcount_internal (186 samples, 0.10%)</title><rect x="71.0" y="213" width="1.3" height="15.0" fill="rgb(214,72,3)" rx="2" ry="2" />
<text  x="74.03" y="223.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (66 samples, 0.04%)</title><rect x="601.8" y="453" width="0.4" height="15.0" fill="rgb(239,128,5)" rx="2" ry="2" />
<text  x="604.76" y="463.5" ></text>
</g>
<g >
<title>_mcount (23 samples, 0.01%)</title><rect x="601.1" y="53" width="0.1" height="15.0" fill="rgb(250,202,13)" rx="2" ry="2" />
<text  x="604.07" y="63.5" ></text>
</g>
<g >
<title>generic_write_end (17 samples, 0.01%)</title><rect x="602.9" y="453" width="0.1" height="15.0" fill="rgb(233,31,29)" rx="2" ry="2" />
<text  x="605.88" y="463.5" ></text>
</g>
<g >
<title>do_idle (64,173 samples, 35.71%)</title><rect x="603.3" y="613" width="421.4" height="15.0" fill="rgb(242,200,16)" rx="2" ry="2" />
<text  x="606.29" y="623.5" >do_idle</text>
</g>
<g >
<title>fb (89,832 samples, 49.99%)</title><rect x="11.4" y="453" width="589.9" height="15.0" fill="rgb(216,217,31)" rx="2" ry="2" />
<text  x="14.36" y="463.5" >fb</text>
</g>
<g >
<title>fb (87,795 samples, 48.86%)</title><rect x="24.7" y="261" width="576.6" height="15.0" fill="rgb(220,134,16)" rx="2" ry="2" />
<text  x="27.74" y="271.5" >fb</text>
</g>
<g >
<title>jbd2__journal_start (65 samples, 0.04%)</title><rect x="601.8" y="437" width="0.4" height="15.0" fill="rgb(249,3,30)" rx="2" ry="2" />
<text  x="604.76" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (24 samples, 0.01%)</title><rect x="10.3" y="613" width="0.2" height="15.0" fill="rgb(253,40,51)" rx="2" ry="2" />
<text  x="13.32" y="623.5" ></text>
</g>
<g >
<title>cpuidle_enter (25,152 samples, 14.00%)</title><rect x="1024.7" y="517" width="165.2" height="15.0" fill="rgb(212,11,8)" rx="2" ry="2" />
<text  x="1027.72" y="527.5" >cpuidle_enter</text>
</g>
<g >
<title>[unknown] (89,836 samples, 49.99%)</title><rect x="11.3" y="661" width="590.0" height="15.0" fill="rgb(215,49,33)" rx="2" ry="2" />
<text  x="14.34" y="671.5" >[unknown]</text>
</g>
<g >
<title>__x64_sys_readlink (23 samples, 0.01%)</title><rect x="10.3" y="597" width="0.2" height="15.0" fill="rgb(243,81,34)" rx="2" ry="2" />
<text  x="13.33" y="607.5" ></text>
</g>
<g >
<title>__libc_write (290 samples, 0.16%)</title><rect x="601.3" y="645" width="1.9" height="15.0" fill="rgb(243,139,44)" rx="2" ry="2" />
<text  x="604.31" y="655.5" ></text>
</g>
<g >
<title>ksys_write (290 samples, 0.16%)</title><rect x="601.3" y="581" width="1.9" height="15.0" fill="rgb(207,35,13)" rx="2" ry="2" />
<text  x="604.31" y="591.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (65 samples, 0.04%)</title><rect x="601.3" y="389" width="0.4" height="15.0" fill="rgb(221,76,20)" rx="2" ry="2" />
<text  x="604.32" y="399.5" ></text>
</g>
<g >
<title>__mcount_internal (11,224 samples, 6.25%)</title><rect x="321.3" y="149" width="73.7" height="15.0" fill="rgb(244,88,30)" rx="2" ry="2" />
<text  x="324.28" y="159.5" >__mcount..</text>
</g>
<g >
<title>_mcount (3,644 samples, 2.03%)</title><rect x="42.1" y="229" width="23.9" height="15.0" fill="rgb(250,55,24)" rx="2" ry="2" />
<text  x="45.09" y="239.5" >_..</text>
</g>
<g >
<title>__mcount_internal (104 samples, 0.06%)</title><rect x="600.3" y="53" width="0.7" height="15.0" fill="rgb(234,214,20)" rx="2" ry="2" />
<text  x="603.31" y="63.5" ></text>
</g>
<g >
<title>create_object (43 samples, 0.02%)</title><rect x="601.3" y="309" width="0.3" height="15.0" fill="rgb(242,139,35)" rx="2" ry="2" />
<text  x="604.34" y="319.5" ></text>
</g>
<g >
<title>stack_trace_save (42 samples, 0.02%)</title><rect x="602.3" y="341" width="0.3" height="15.0" fill="rgb(245,25,18)" rx="2" ry="2" />
<text  x="605.28" y="351.5" ></text>
</g>
<g >
<title>user_path_at_empty (21 samples, 0.01%)</title><rect x="10.3" y="565" width="0.2" height="15.0" fill="rgb(212,13,43)" rx="2" ry="2" />
<text  x="13.33" y="575.5" ></text>
</g>
<g >
<title>vfs_write (290 samples, 0.16%)</title><rect x="601.3" y="565" width="1.9" height="15.0" fill="rgb(211,139,2)" rx="2" ry="2" />
<text  x="604.31" y="575.5" ></text>
</g>
<g >
<title>__mcount_internal (21 samples, 0.01%)</title><rect x="601.1" y="37" width="0.1" height="15.0" fill="rgb(254,48,7)" rx="2" ry="2" />
<text  x="604.09" y="47.5" ></text>
</g>
<g >
<title>fb (89,835 samples, 49.99%)</title><rect x="11.3" y="501" width="590.0" height="15.0" fill="rgb(246,200,44)" rx="2" ry="2" />
<text  x="14.34" y="511.5" >fb</text>
</g>
<g >
<title>ext4_da_write_end (26 samples, 0.01%)</title><rect x="602.8" y="469" width="0.2" height="15.0" fill="rgb(217,105,40)" rx="2" ry="2" />
<text  x="605.82" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (290 samples, 0.16%)</title><rect x="601.3" y="613" width="1.9" height="15.0" fill="rgb(211,214,10)" rx="2" ry="2" />
<text  x="604.31" y="623.5" ></text>
</g>
<g >
<title>fb (89,833 samples, 49.99%)</title><rect x="11.4" y="469" width="589.9" height="15.0" fill="rgb(220,59,33)" rx="2" ry="2" />
<text  x="14.35" y="479.5" >fb</text>
</g>
<g >
<title>kmemleak_alloc (52 samples, 0.03%)</title><rect x="602.2" y="373" width="0.4" height="15.0" fill="rgb(239,128,12)" rx="2" ry="2" />
<text  x="605.22" y="383.5" ></text>
</g>
<g >
<title>fb (31,413 samples, 17.48%)</title><rect x="395.0" y="165" width="206.3" height="15.0" fill="rgb(251,66,54)" rx="2" ry="2" />
<text  x="397.99" y="175.5" >fb</text>
</g>
<g >
<title>ext4_file_write_iter (283 samples, 0.16%)</title><rect x="601.3" y="517" width="1.9" height="15.0" fill="rgb(225,138,54)" rx="2" ry="2" />
<text  x="604.32" y="527.5" ></text>
</g>
<g >
<title>fb (85,668 samples, 47.68%)</title><rect x="38.7" y="245" width="562.6" height="15.0" fill="rgb(217,148,0)" rx="2" ry="2" />
<text  x="41.70" y="255.5" >fb</text>
</g>
<g >
<title>cpu_startup_entry (64,174 samples, 35.71%)</title><rect x="603.3" y="629" width="421.4" height="15.0" fill="rgb(246,36,31)" rx="2" ry="2" />
<text  x="606.29" y="639.5" >cpu_startup_entry</text>
</g>
<g >
<title>_mcount (906 samples, 0.50%)</title><rect x="18.8" y="261" width="5.9" height="15.0" fill="rgb(233,139,26)" rx="2" ry="2" />
<text  x="21.79" y="271.5" ></text>
</g>
<g >
<title>kmemleak_alloc (61 samples, 0.03%)</title><rect x="601.8" y="405" width="0.4" height="15.0" fill="rgb(244,101,10)" rx="2" ry="2" />
<text  x="604.78" y="415.5" ></text>
</g>
<g >
<title>_mcount (112 samples, 0.06%)</title><rect x="12.2" y="309" width="0.7" height="15.0" fill="rgb(225,170,35)" rx="2" ry="2" />
<text  x="15.20" y="319.5" ></text>
</g>
<g >
<title>fb (17,774 samples, 9.89%)</title><rect x="484.6" y="149" width="116.7" height="15.0" fill="rgb(248,155,0)" rx="2" ry="2" />
<text  x="487.55" y="159.5" >fb</text>
</g>
<g >
<title>ext4_write_checks (66 samples, 0.04%)</title><rect x="601.3" y="485" width="0.5" height="15.0" fill="rgb(217,145,1)" rx="2" ry="2" />
<text  x="604.32" y="495.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (33 samples, 0.02%)</title><rect x="601.3" y="293" width="0.3" height="15.0" fill="rgb(231,92,9)" rx="2" ry="2" />
<text  x="604.34" y="303.5" ></text>
</g>
<g >
<title>cron (25 samples, 0.01%)</title><rect x="11.0" y="677" width="0.2" height="15.0" fill="rgb(217,144,48)" rx="2" ry="2" />
<text  x="14.04" y="687.5" ></text>
</g>
<g >
<title>main (89,835 samples, 49.99%)</title><rect x="11.3" y="629" width="590.0" height="15.0" fill="rgb(219,199,18)" rx="2" ry="2" />
<text  x="14.34" y="639.5" >main</text>
</g>
<g >
<title>entry_SYSCALL_64 (25 samples, 0.01%)</title><rect x="10.3" y="629" width="0.2" height="15.0" fill="rgb(228,19,14)" rx="2" ry="2" />
<text  x="13.32" y="639.5" ></text>
</g>
<g >
<title>alloc_page_buffers (56 samples, 0.03%)</title><rect x="602.2" y="421" width="0.4" height="15.0" fill="rgb(233,106,43)" rx="2" ry="2" />
<text  x="605.19" y="431.5" ></text>
</g>
<g >
<title>fb (89,835 samples, 49.99%)</title><rect x="11.3" y="533" width="590.0" height="15.0" fill="rgb(241,92,2)" rx="2" ry="2" />
<text  x="14.34" y="543.5" >fb</text>
</g>
<g >
<title>create_empty_buffers (56 samples, 0.03%)</title><rect x="602.2" y="437" width="0.4" height="15.0" fill="rgb(237,105,1)" rx="2" ry="2" />
<text  x="605.19" y="447.5" ></text>
</g>
<g >
<title>__mcount_internal (385 samples, 0.21%)</title><rect x="15.5" y="261" width="2.5" height="15.0" fill="rgb(239,84,35)" rx="2" ry="2" />
<text  x="18.48" y="271.5" ></text>
</g>
<g >
<title>_mcount (4,060 samples, 2.26%)</title><rect x="553.6" y="117" width="26.7" height="15.0" fill="rgb(233,2,20)" rx="2" ry="2" />
<text  x="556.63" y="127.5" >_..</text>
</g>
<g >
<title>fb (89,831 samples, 49.99%)</title><rect x="11.4" y="437" width="589.9" height="15.0" fill="rgb(240,58,36)" rx="2" ry="2" />
<text  x="14.37" y="447.5" >fb</text>
</g>
<g >
<title>__mcount_internal (3,072 samples, 1.71%)</title><rect x="45.8" y="213" width="20.2" height="15.0" fill="rgb(213,37,6)" rx="2" ry="2" />
<text  x="48.85" y="223.5" ></text>
</g>
<g >
<title>_mcount (1,638 samples, 0.91%)</title><rect x="584.4" y="101" width="10.7" height="15.0" fill="rgb(217,137,49)" rx="2" ry="2" />
<text  x="587.37" y="111.5" ></text>
</g>
<g >
<title>__mcount_internal (45 samples, 0.03%)</title><rect x="11.9" y="309" width="0.2" height="15.0" fill="rgb(218,169,18)" rx="2" ry="2" />
<text  x="14.85" y="319.5" ></text>
</g>
<g >
<title>fb (89,835 samples, 49.99%)</title><rect x="11.3" y="597" width="590.0" height="15.0" fill="rgb(239,139,15)" rx="2" ry="2" />
<text  x="14.34" y="607.5" >fb</text>
</g>
<g >
<title>cpu_startup_entry (25,161 samples, 14.00%)</title><rect x="1024.7" y="565" width="165.2" height="15.0" fill="rgb(214,95,33)" rx="2" ry="2" />
<text  x="1027.71" y="575.5" >cpu_startup_entry</text>
</g>
<g >
<title>fb (89,816 samples, 49.98%)</title><rect x="11.5" y="373" width="589.8" height="15.0" fill="rgb(215,50,10)" rx="2" ry="2" />
<text  x="14.46" y="383.5" >fb</text>
</g>
<g >
<title>_mcount (6,387 samples, 3.55%)</title><rect x="72.3" y="213" width="41.9" height="15.0" fill="rgb(243,104,26)" rx="2" ry="2" />
<text  x="75.25" y="223.5" >_mc..</text>
</g>
<g >
<title>rest_init (25,161 samples, 14.00%)</title><rect x="1024.7" y="581" width="165.2" height="15.0" fill="rgb(231,93,37)" rx="2" ry="2" />
<text  x="1027.71" y="591.5" >rest_init</text>
</g>
<g >
<title>__mcount_internal (1,354 samples, 0.75%)</title><rect x="586.2" y="85" width="8.9" height="15.0" fill="rgb(251,56,20)" rx="2" ry="2" />
<text  x="589.23" y="95.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (25,161 samples, 14.00%)</title><rect x="1024.7" y="629" width="165.2" height="15.0" fill="rgb(221,78,24)" rx="2" ry="2" />
<text  x="1027.71" y="639.5" >x86_64_start_reservat..</text>
</g>
<g >
<title>__mcount_internal (3,425 samples, 1.91%)</title><rect x="557.8" y="101" width="22.5" height="15.0" fill="rgb(207,102,0)" rx="2" ry="2" />
<text  x="560.80" y="111.5" >_..</text>
</g>
<g >
<title>__mcount_internal (401 samples, 0.22%)</title><rect x="597.1" y="69" width="2.6" height="15.0" fill="rgb(223,205,39)" rx="2" ry="2" />
<text  x="600.09" y="79.5" ></text>
</g>
<g >
<title>fb (8,459 samples, 4.71%)</title><rect x="545.7" y="133" width="55.6" height="15.0" fill="rgb(223,120,14)" rx="2" ry="2" />
<text  x="548.72" y="143.5" >fb</text>
</g>
<g >
<title>file_modified (66 samples, 0.04%)</title><rect x="601.3" y="469" width="0.5" height="15.0" fill="rgb(232,25,22)" rx="2" ry="2" />
<text  x="604.32" y="479.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (55 samples, 0.03%)</title><rect x="602.2" y="389" width="0.4" height="15.0" fill="rgb(211,48,53)" rx="2" ry="2" />
<text  x="605.20" y="399.5" ></text>
</g>
<g >
<title>generic_update_time (66 samples, 0.04%)</title><rect x="601.3" y="421" width="0.5" height="15.0" fill="rgb(229,13,49)" rx="2" ry="2" />
<text  x="604.32" y="431.5" ></text>
</g>
<g >
<title>update_time (66 samples, 0.04%)</title><rect x="601.3" y="437" width="0.5" height="15.0" fill="rgb(246,106,6)" rx="2" ry="2" />
<text  x="604.32" y="447.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (22 samples, 0.01%)</title><rect x="603.0" y="453" width="0.1" height="15.0" fill="rgb(209,205,39)" rx="2" ry="2" />
<text  x="606.00" y="463.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (64 samples, 0.04%)</title><rect x="601.8" y="421" width="0.4" height="15.0" fill="rgb(222,141,32)" rx="2" ry="2" />
<text  x="604.76" y="431.5" ></text>
</g>
<g >
<title>__mcount_internal (185 samples, 0.10%)</title><rect x="13.4" y="277" width="1.2" height="15.0" fill="rgb(229,175,42)" rx="2" ry="2" />
<text  x="16.36" y="287.5" ></text>
</g>
<g >
<title>fb (3,195 samples, 1.78%)</title><rect x="580.3" y="117" width="21.0" height="15.0" fill="rgb(214,78,0)" rx="2" ry="2" />
<text  x="583.29" y="127.5" ></text>
</g>
<g >
<title>fb (89,592 samples, 49.86%)</title><rect x="12.9" y="309" width="588.4" height="15.0" fill="rgb(228,111,27)" rx="2" ry="2" />
<text  x="15.94" y="319.5" >fb</text>
</g>
<g >
<title>__mark_inode_dirty (66 samples, 0.04%)</title><rect x="601.3" y="405" width="0.5" height="15.0" fill="rgb(243,5,36)" rx="2" ry="2" />
<text  x="604.32" y="415.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (45 samples, 0.03%)</title><rect x="601.3" y="341" width="0.3" height="15.0" fill="rgb(234,156,16)" rx="2" ry="2" />
<text  x="604.32" y="351.5" ></text>
</g>
<g >
<title>arch_call_rest_init (25,161 samples, 14.00%)</title><rect x="1024.7" y="597" width="165.2" height="15.0" fill="rgb(238,141,7)" rx="2" ry="2" />
<text  x="1027.71" y="607.5" >arch_call_rest_init</text>
</g>
<g >
<title>__libc_start_main (89,835 samples, 49.99%)</title><rect x="11.3" y="645" width="590.0" height="15.0" fill="rgb(253,14,12)" rx="2" ry="2" />
<text  x="14.34" y="655.5" >__libc_start_main</text>
</g>
<g >
<title>create_object (60 samples, 0.03%)</title><rect x="601.8" y="389" width="0.4" height="15.0" fill="rgb(229,17,3)" rx="2" ry="2" />
<text  x="604.78" y="399.5" ></text>
</g>
<g >
<title>__mcount_internal (5,313 samples, 2.96%)</title><rect x="79.3" y="197" width="34.9" height="15.0" fill="rgb(235,88,20)" rx="2" ry="2" />
<text  x="82.31" y="207.5" >__..</text>
</g>
<g >
<title>grab_cache_page_write_begin (26 samples, 0.01%)</title><rect x="602.6" y="453" width="0.2" height="15.0" fill="rgb(243,184,52)" rx="2" ry="2" />
<text  x="605.64" y="463.5" ></text>
</g>
<g >
<title>fb (89,835 samples, 49.99%)</title><rect x="11.3" y="613" width="590.0" height="15.0" fill="rgb(209,18,17)" rx="2" ry="2" />
<text  x="14.34" y="623.5" >fb</text>
</g>
<g >
<title>start_secondary (64,174 samples, 35.71%)</title><rect x="603.3" y="645" width="421.4" height="15.0" fill="rgb(233,12,11)" rx="2" ry="2" />
<text  x="606.29" y="655.5" >start_secondary</text>
</g>
<g >
<title>_mcount (13,439 samples, 7.48%)</title><rect x="306.7" y="165" width="88.3" height="15.0" fill="rgb(226,103,51)" rx="2" ry="2" />
<text  x="309.74" y="175.5" >_mcount</text>
</g>
<g >
<title>fb (89,343 samples, 49.72%)</title><rect x="14.6" y="293" width="586.7" height="15.0" fill="rgb(246,187,41)" rx="2" ry="2" />
<text  x="17.57" y="303.5" >fb</text>
</g>
<g >
<title>pagecache_get_page (26 samples, 0.01%)</title><rect x="602.6" y="437" width="0.2" height="15.0" fill="rgb(248,131,42)" rx="2" ry="2" />
<text  x="605.64" y="447.5" ></text>
</g>
<g >
<title>iov_iter_copy_from_user_atomic (22 samples, 0.01%)</title><rect x="603.0" y="469" width="0.1" height="15.0" fill="rgb(242,30,23)" rx="2" ry="2" />
<text  x="606.00" y="479.5" ></text>
</g>
<g >
<title>fb (89,712 samples, 49.93%)</title><rect x="12.1" y="325" width="589.2" height="15.0" fill="rgb(223,152,0)" rx="2" ry="2" />
<text  x="15.15" y="335.5" >fb</text>
</g>
<g >
<title>__mcount_internal (390 samples, 0.22%)</title><rect x="304.2" y="165" width="2.5" height="15.0" fill="rgb(227,224,24)" rx="2" ry="2" />
<text  x="307.17" y="175.5" ></text>
</g>
<g >
<title>fb (88,819 samples, 49.43%)</title><rect x="18.0" y="277" width="583.3" height="15.0" fill="rgb(239,174,10)" rx="2" ry="2" />
<text  x="21.01" y="287.5" >fb</text>
</g>
<g >
<title>fb (89,835 samples, 49.99%)</title><rect x="11.3" y="549" width="590.0" height="15.0" fill="rgb(236,202,3)" rx="2" ry="2" />
<text  x="14.34" y="559.5" >fb</text>
</g>
<g >
<title>_mcount (227 samples, 0.13%)</title><rect x="13.1" y="293" width="1.5" height="15.0" fill="rgb(218,94,5)" rx="2" ry="2" />
<text  x="16.08" y="303.5" ></text>
</g>
<g >
<title>arch_stack_walk (32 samples, 0.02%)</title><rect x="602.3" y="325" width="0.2" height="15.0" fill="rgb(242,100,7)" rx="2" ry="2" />
<text  x="605.28" y="335.5" ></text>
</g>
<g >
<title>fb (89,835 samples, 49.99%)</title><rect x="11.3" y="581" width="590.0" height="15.0" fill="rgb(217,70,29)" rx="2" ry="2" />
<text  x="14.34" y="591.5" >fb</text>
</g>
<g >
<title>fb (235 samples, 0.13%)</title><rect x="599.7" y="85" width="1.6" height="15.0" fill="rgb(253,131,37)" rx="2" ry="2" />
<text  x="602.73" y="95.5" ></text>
</g>
<g >
<title>_mcount (466 samples, 0.26%)</title><rect x="15.0" y="277" width="3.0" height="15.0" fill="rgb(233,4,33)" rx="2" ry="2" />
<text  x="17.95" y="287.5" ></text>
</g>
<g >
<title>__mcount_internal (91 samples, 0.05%)</title><rect x="12.3" y="293" width="0.6" height="15.0" fill="rgb(251,227,50)" rx="2" ry="2" />
<text  x="15.34" y="303.5" ></text>
</g>
<g >
<title>__mcount_internal (22 samples, 0.01%)</title><rect x="18.6" y="261" width="0.2" height="15.0" fill="rgb(208,135,30)" rx="2" ry="2" />
<text  x="21.64" y="271.5" ></text>
</g>
<g >
<title>__mcount_internal (224 samples, 0.12%)</title><rect x="495.9" y="133" width="1.4" height="15.0" fill="rgb(246,29,13)" rx="2" ry="2" />
<text  x="498.87" y="143.5" ></text>
</g>
<g >
<title>_mcount (477 samples, 0.27%)</title><rect x="596.6" y="85" width="3.1" height="15.0" fill="rgb(233,68,7)" rx="2" ry="2" />
<text  x="599.60" y="95.5" ></text>
</g>
</g>
</svg>
